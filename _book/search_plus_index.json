{"./":{"url":"./","title":"前言","keywords":"","body":"精彩无线 Web 开发手册(PC 端) 创建时间：2019 年 3 月 27 日 最后更新：2019 年 7 月 03 日 此文档致力于为精彩无线PC端的产品、项目开发提供统一的标准规范。文档将包含PC端的UI设计规范、前端代码规范、以及项目资源整合等。期待能在多人后续不断完善、维护下成为公司真正的规范文档， "},"Pages/Part0/shuoming.html":{"url":"Pages/Part0/shuoming.html","title":"文档说明","keywords":"","body":"文档说明 目前（2019 年）此规范文档适用于公司购买的人人开源框架，此前所开发的燃气、热力等项目框架不适用此规范。后续若公司更换框架或框架升级，将会在更新历史栏目进行说明，遇到的问题和解决方法将记录在问题列表中。 【重要】 此文档目前托管在 github 上，账号：sdjcwx，密码：咨询薛猛 开发环境：node8.x 以上；Vue2.0+；Element2.0+ 人人开源：人人开源 Vue 官网：Vue-2.5.17 Element：Element-2.9.1 文档地址：GitHub 内网地址 文档文件说明 为方便此文档的后续人员维护，在此记录所用到的设置和插件。此文档基于GitBook 程序开发，用的MarkDown语法书写。 【重要】 此文档中所有可下载的资源文件，都存放在 28 的 ftp 文件目录内，可点击跳转直接打开 ftp，或按说明需求下载。 book.json 文件：[点击下载] 包含基础设置和所用到的插件 website.css 文件：[点击下载] 自定义了一些 gitbook 的样式 MarkDown 语法：[在线预览] 安装完 GitBook 程序后，覆盖目录下的book.json 文件文件，按以下命令执行即可。 / 安装文件中的插件 gitbook install / 重新创建gitbook gitbook build / 启动gitbook gitbook serve 相关人员 相关人员设计、制定内容后，在此文档中提交可预览或可下载的资源文件，后续所有项目开发需安装相关规范来进行设计和开发。新增内容或内容维护经公司审批后发布到此文档内。 项目 负责人 内容 此文档维护 刘振 根据框架的升级、更换来维护此文档 UI 设计规范 王帅 王荣 田苗 设计公司项目的各类 UI 相关内容 前端开发规范 刘振 制定、规范前端相关的组件和代码规范 公用方法封装 刘振 刘书阳 庞春磊 赵世俊 封装、优化项目中公用的各类方法和组件 "},"Pages/Part0/kuangjiashuoming.html":{"url":"Pages/Part0/kuangjiashuoming.html","title":"框架使用说明","keywords":"","body":"框架使用说明 【重要】此文档中示例框架的 svn 地址：右键复制地址。用于新项目请复制一份，不要在此示例框架中修改！ 如果你是第一次用此框架和 java 环境，请点击下载：java 框架所需文件.zip，并按照以下顺序进行设置。 此压缩包内包含：jdk(1.8)，IDEA，MAVEN(3.6.1)，若官网有新版本可从官网下载 安装 JDK 并配置 JDK 环境：WIN10 配置 JDK 教程 安装 IDEA，resources_zh_CN_IntelliJIDEA_2018.3_r1.jar是汉化文件，拷贝到 IDEA 安装目录/lib 下 激活并配置 JDK：IDEA 配置 JDK 教程 IDEA 配置 Maven：IDEA 配置 Maven 教程 LocalWarehouse.zip是第 5 条教程中所用到的 LocalWarehouse 文件资源，后续就不需要再下载了。 修改后端数据库地址，文件路径：security-enterprise/src/main/java/io/renren/AdminApplication.java，#MySQL 下面的相关信息 修改前端地址：security-enterprise-admin/Public/index.html里的[开发环境下]信息，默认是 localhost，即：用的本地后台服务。可改为 192.168.0.28:8080 security-enterprise：后端代码文件，具体操作请阅读[security-enterprise 开发文档 2.2_专业版.pdf] security-enterprise-admin：前端代码文件，具体目录和文件说明请查看 [框架资源说明]，并按照规定操作。 "},"Pages/Part0/ziyuanshuoming.html":{"url":"Pages/Part0/ziyuanshuoming.html","title":"框架资源说明","keywords":"","body":"项目资源说明 为统一、整合项目中的各类css、js、图片等资源，防止重复文件过多，引用不必要的文件等，现在整合项目中所用到的资源，请按照以下资源目录结构来进行存储。 --- assets 静态资源文件库 | --- css |--- main.css 框架全局样式文件 |--- other.css 其他样式覆盖文件 | ---- fonts 阿里图标库 | ---- img 图片库 | ---- jq jquery版本库 | ---- js |--- public.js 公用方法封装文件 | ---- scss scss文件库 |--- main.scss 框架样式scss文件 ---- components 框架封装的各类功能组件 ---- utils 其他组件、工具库 【重要】在此框架中，引入文件可以用绝对路径符号:@，路径为根目录下的src文件夹。比如引入一个css文件：import '@/assets/css/a.css' src/assets/css/main.css：框架主要样式文件，由 main.scss 自动生成，禁止修改、删除！！！ src/assets/fonts：阿里图标库，具体使用说明请查看阿里图标库 src/assets/css/other.css：特殊样式文件，覆盖原有样式，需单独引入。 src/assets/jq：存放所有的 jquery 文件，引入 jq 前请先查看此文件夹内是否已经存在。 src/assets/js/public.js：公用方法的封装文件，比如搜索、弹窗等等。尽量减少同样功能的方法声明 src/assets/scss/main.scss：框架样式来源文件，采用 scss 预处理方式，统一、规范化框架样式声明 src/components：在开发中封装的各类功能组件，比如表格、附件上传、Tree 等等。 src/utils：存放其他组件、工具，比如第三方上传附件工具等。 "},"Pages/Part0/icon.html":{"url":"Pages/Part0/icon.html","title":"阿里图标库","keywords":"","body":"阿里图标库说明 为了统一、规范公司图标样式和代码格式，后续所有项目都将采用阿里icon图标库，文件存于各项目的fonts文件夹中，更新图标库只需下载图库文件，覆盖此文件夹所有文件即可。 【重要】目前公司图标库已分类，请不同项目开发人员按下面说明进行引用。 【强制】一个项目只能引用一个图标库。 【强制】所有图标前缀必须为icon PC端-GIS产品图标库：仅用于公司GIS产品的图库，不得用于任何项目！！！ PC端-项目-线形图标库：用于公司所有项目，风格为扁平化的先行图标，效果如图1。 PC端-项目-面形图标库：用于公司所有项目，风格为带有底色的面型图标，效果如图2。 使用方法 图标库地址：阿里icon 用户名：sdjcwx 密码：*** // 引用一个图标: "},"Pages/Part1/shuoming.html":{"url":"Pages/Part1/shuoming.html","title":"说明","keywords":"","body":"UI设计规范说明 此框架UI暂无设计，所有组件、元素样式都基于element，后续需要由UI单独设计框架整体风格及样式。 【重要】UI规范需包含、详细以下内容： 框架主色调：包括组件、按钮、背景色。字体颜色等； 像素大小：包括标题H1~H6、按钮、图标等像素大小； 页面布局：包括列表页、查看页、添加页、表单布局等； "},"Pages/Part2/shuoming.html":{"url":"Pages/Part2/shuoming.html","title":"说明","keywords":"","body":"前端规范说明 【强制】此前端规范适用于所有基于此框架开发项目的人员，为了提高代码的规范性和可维护性，减少开发中的重复工作以及后续项目的返工，每个人在开发中应尽量遵循以下要求： 1.页面开头第一个元素必须添加公用样式名和页面名，比如 2.页面中不得存在无用的空元素代码，比如 3.按规范使用、书写框架中的组件以及页面布局代码 4.除非特殊页面样式需求，禁止书写行内代码，比如 5.有页面布局需求的，请先搜索此文档查看是否已有布局实例，若没有请联系相关前端人员。 "},"Pages/Part2/html.html":{"url":"Pages/Part2/html.html","title":"HTML 代码书写规范","keywords":"","body":"HTML代码书写规范 1.根据不同的页面功能，body下的第一个元素必须添加声明class，实例如下： // 列表页 // 添加页 // 查看页 2.所有页面的按钮、组件的class必须一致，每个按钮都有例如常用的增删改查： "},"Pages/Part3/shuoming.html":{"url":"Pages/Part3/shuoming.html","title":"说明","keywords":"","body":"框架组件及公用方法说明 框架所有的自定义封装组件都存放在 src/components 文件夹中，后续封装的组件请在文件中记录组件详细使用说明和参数字段说明，并在此规范文档中更新。 "},"Pages/Part3/hunru.html":{"url":"Pages/Part3/hunru.html","title":"【混入】mixins.js 混入文件","keywords":"","body":"mixins.js 混入文件 文件路径 src/mixins/mixins.js，采用 Vue 的混入文件机制，将框架中通用的属性、方法等放到此文件中，可在所有页面中混入公用属性和方法，比如常用的增删改查、导入导出等等。具体说明请参考官方文档【Vue 的混入说明】 所有的列表页面都需要引用此文件，使用方法： import mixins from '@/mixins/mixins' // 引入 export default { mixins: [mixins] // 注册混入文件 } 目前封装的公用方法如下，后续若有通用数据处理类方法，请放到此文件中。 // 获取数据列表 // obj 是传过来的查询对象， 包含接口地址、 各类配置等 getDataList (obj) { // 注意：所有页面的获取数据，必须在vue声明周期的created中执行 // creaated () {getDataList (obj)} } // 新增 / 修改 // id：如果为undefined，就是修改功能 addOrUpdateHandle (obj, id) {} // 删除 deleteHandle (obj, id) {} // 导出 exportHandle (obj) {} // 查看 viewHandle (obj, id) {} "},"Pages/Part3/fun-publicJS.html":{"url":"Pages/Part3/fun-publicJS.html","title":"【公用】publicJS 公用方法文件","keywords":"","body":"publicJS 公用方法文件 文件路径 src/assets/js/publicJS.js，此文件内的所有方法均基于 Vue 的【开发插件】功能开发，并已全局注册。后续若有公用 dom 操作类方法，请在此文件内开发。 【强制】在封装某个功能在封装某个功能前，请先全局搜索查看是否已存在类似方法，若存在类似方法，尽量优化、完善旧方法。封装新方法时，请务必写清楚此方法的用途、徐传递的参数及参数说明。 // 封装一个方法示例 // 此方法用于**** // field1：字段1，field2：字段2 Vue.prototype.functionName = function (field1,field2) { } // 在页面中使用此方法 this.functionName(field1,field2) { } "},"Pages/Part3/comp-table.html":{"url":"Pages/Part3/comp-table.html","title":"【组件】Table 表格","keywords":"","body":"[组件]Table 表格 组件路径 src/components/Table/Table.vue，最常用的用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。 使用示例 【必填】dataModel：类型【object】，要展示的一个表格的数据对象，一个页面可能存在多个数据表格，所以需要配置此对象内的不同参数。包含参数如下： dataModel { addVisible: false, // 此表格的添加页面初始可视化状态 addref: 'dataModelAdd', // 此表格的添加页面的ref标识符 view: false, // 此表格的添加页面初始可视化状态 viewref: 'dataModelView', // 此表格的添加页面初始可视化状态 mixinViewModuleOptions{ // 此表格的必要初始属性 getDataListURL: '/demo/news/page', // 请求数据的接口地址 deleteURL: '/demo/news' // 删除数据的接口地址 getDataListIsPage: false // 数据列表接口，是否需要分页，默认为true不需要填写，只需不分页时填写为false即可 deleteIsBatch: false, // 删除接口，是否需要批量，默认为true不需要填写，数据表格为单选时填写为false即可 deleteIsBatchKey: 'id', // 删除接口，批量状态下由那个key进行标记操作？比如：pid，uid... exportURL: '', // 导出接口，API地址 dataForm: {}, // 页面中的查询条件，比如包含title、pubDate等等 }, tableData: [], // 存储请求后的数据 tableColumn: [// 一列数据的属性参数 { fixed: 'left', // 是否固定列，left,right type: 'selection', // 列的类型，selection(多选)/index(索引)/expand(展开项) label: '标题', // 显示的标题 prop: 'title', // 对应列内容的字段名 sortable: true, // 对应列是否可以排序 width: '400', // 对应列的宽度 isTip: true, // 当内容过长被隐藏时显示 tooltip formatter: 'formatterFunName' // 对此栏的值进行格式化，比如性别如果是0和1，可以经过格式化后返回为男和女 }, ], tableOption: { // 针对每一行数据要进行的操作栏 fixed: 'right', options: [ { label: '删除', // 操作的label内容 methods: this.deleteHandle, // 要执行的方法 hasPermission: 'customPages:model2:delete' // 按钮的权限标识符 } ] } } Table Methods 表格方法 // 获取当前表格点击的当前行的数据 getCurrentRow () { console.log(this.dataModel.currentRow) }, // 获取当前多选表格的选中行的数据 getCurrentRows () { console.log(this.dataModel.currentRows) }, // 根据某一行的某个字段判断，来高亮当前行 tableRowClassName ({ row, rowIndex }) { if (row.title === 'AAA') { return { id: rowIndex, className: 'warning-row' } } else if (rowIndex === 3) { return { id: rowIndex, className: 'success-row' } } }, // 格式化性别 formatSex (val) { return val === '0' ? '男': '女' }, "},"Pages/Part3/comp-tableTree.html":{"url":"Pages/Part3/comp-tableTree.html","title":"【组件】TableTree 表格树","keywords":"","body":"[组件]TableTree 表格树 组件路径 src/components/Table/TableTree.vue，表格中的数据以树状形式展示，存在上下级的数据关系。 使用示例 【必填】dataModel：类型【object】，要展示的一个表格的数据对象，一个页面可能存在多个数据表格，所以需要配置此对象内的不同参数。包含参数和组件 Table 表格相同，请参考 Table 表格组件的参数说明。 【必填】treeTableRowKey：行数据的 Key TableTree Methods 表格树方法 // 获取当前表格点击的当前行的数据 getCurrentRow () { console.log(this.dataModel.currentRow) } "},"Pages/Part3/comp-uploadFile.html":{"url":"Pages/Part3/comp-uploadFile.html","title":"【组件】UploadFile 附件上传","keywords":"","body":"[组件]UploadFile 附件上传 组件路径 src/components/File/UploadFile.vue，用于添加项中上传图片、文档、视频等各类附件。 使用示例 import UploadFile from '@/components/File/UploadFile' // 引入组件 components: {UploadFile} // 注册组件 【必填】fileData：类型【object】，一个上传附件对象，一个页面可能存在多个上传附件，需对应多个不同的 dataModel。 【选填】isView：为 true 时，调用附件查看组件，只能查看附件不能上传。 dataModel: { ref:'dataModelFileRef' // 当前上传附件的标识符，若一个添加页面存在多个上传模块，必须填不同名称 title: '', // 附件标题 limit: 4, // 限制最多上传附件4个 accept: '', // 限制上传附件类型，此属性不填默认为：.jpg,.jpeg,.png,.gif,.bmp,.mp3,.mp4,.txt,.doc,.docx,.pptx,.ppt.,xls,.xlsx, fileSize: 5, // 限制单个附件体积大小不超过5M，此属性不填默认最大999M fileList: [ // 用于存储已选择的附件；若存储修改操作时后台传过来的已存在的附件信息 { name: '1.jpg', // 已存在附件的名称 url: './img/1.jpg' // 已存在附件的地址 } ] } UploadFile Methods 附件上传方法 // 手动提交附件 // id：关联此附件所在添加页面保存后返回的ID submitUpload (id) {} // 此方法使用示例： dataFormSubmitHandle: debounce(function () { // 提交表单 this.$http().then(({ data: res })=>function(){ if(res.code !== 0){ }else { submitUpload (res.id) // 提交附件 } }).catch(() => { }) } "},"Pages/Part3/comp-uploadPicture.html":{"url":"Pages/Part3/comp-uploadPicture.html","title":"【组件】UploadPicture 附件上传","keywords":"","body":"[组件]UploadPicture 头像上传 组件路径 src/components/File/UploadPicture.vue，用于用户头像上传、单张轮播图上传等等。 使用示例 import UploadPicture from '@/components/File/UploadPicture' // 引入组件 components: {UploadPicture} // 注册组件 【必填】uploadData：类型【object】，要上传的数据对象。 【必填】handleAvatarSuccess：文件上传成功时的钩子。 【必填】handleAvatarSuccessFun：往 UploadPicture 组件传递的要执行的方法名，因为可能一个页面存在多个此组件，需要执行不同的方法。 dataModel: { action: window.SITE_CONFIG['apiURL'] + '/sys/oss/upload', // 上传接口地址 imageUrl: '', // 上传成功后的图片地址 headers: { 'token': Cookies.get('token') } // 用于验证的token } UploadPicture Methods 附件上传方法 // 附件上传成功后 // res：上传成功后后台返回来的数据 // file：上传成功后后台返回来的附件的信息数据 handleAvatarSuccess (res, file) { if (res.code === 0) { this.dataForm.pictureUrl = res.data.src // 获取到附件的地址用于验证 this.uploadData.imageUrl = URL.createObjectURL(file.raw) // 获取到附件的地址用于保存 } else { this.showMsg(500, `文件上传失败!`) return false } } "},"Pages/Part3/comp-tree.html":{"url":"Pages/Part3/comp-tree.html","title":"【组件】Tree 树形控件","keywords":"","body":"[组件]Tree 树形控件 组件路径 src/components/File/Tree/Tree.vue，Tree 树形控件用于展示存在上下级逻辑的数据 使用示例 import componentsTree from '@/components/Tree/Tree' // 引入组件 components: {componentsTree} // 注册组件 【必填】treeData：树装结构的数据来源 【必填】ref：此树状控件标识符，一个页面可能存在多个树，通过此 ref 区分 【必填】treeNodeKey：树状节点的唯一标识符 待修改 Tree Methods 树形控件方法 // 清空所有选中==一般查询重置时父组件直接调用 this.$refs.modelTree.setCheckedKeys([]) // 此方法用法： // 父级页面通过组件ref调用 this.$refs[refName].clearAllChecked() "},"Pages/Part3/comp-tinyMce.html":{"url":"Pages/Part3/comp-tinyMce.html","title":"【组件】TinyMce 文本编辑器","keywords":"","body":"[组件]TinyMce 文本编辑器 组件路径 src/components/tinyMce/tinyMce.vue，二次封装第三方富文本编辑器，能保存从 word 拷贝过来的文本格式。 使用示例 import Editor from '@/components/tinyMce/tinyMce' // 引入组件 components: {Editor} // 注册组件 【必填】evalue：用于存储编辑器内的内容 【必填】contentChangeFun：给此组件传递的要执行的方法名 【必填】 @contentChangeFun：通过此方法获取编辑器返回的内容 待修改 TinyMce Methods 文本编辑器方法 // 获取编辑器返回的内容 contentChangeFun (val) { this.dataForm.content = val }, "},"Pages/Part3/comp-baiduMap.html":{"url":"Pages/Part3/comp-baiduMap.html","title":"【组件】baiduMap 百度地图","keywords":"","body":"[组件]baiduMap 百度地图 组件路径 src/components/Maps/BaiduMap.vue，基于【Vue Baidu Map】组件的二次开发，后续添加相关百度地图功能，请先按照此组件的文档说明进行开发。 使用示例 import baiduMap from '@/components/Maps/BaiduMap' // 引入组件 components: {baiduMap} // 注册组件 【必填】mapData：类型【object】，传给组件的一个包含经纬度的数据对象 【必填】ref：此组件的标识符，用于一些基于此标识符的操作 【必填】 @contentChangeFun：通过此方法获取组件返回来的经纬度数据 dataModel： { lng: '', // 经度 lat: '' // 纬度 } baiduMap Methods 百度地图方法 // 接收地图子组件返回来的地图上点的经纬度 getPointGT (res) { this.dataForm.lng = res.lng this.dataForm.lat = res.lat } "},"Pages/QEList/shuoming.html":{"url":"Pages/QEList/shuoming.html","title":"说明","keywords":"","body":"说明 此问题列表将尽量收集整理各位在开发过程中遇到的前端问题。 "},"Pages/QEList/dengluyanzhengma.html":{"url":"Pages/QEList/dengluyanzhengma.html","title":"登录页验证码功能","keywords":"","body":"登录页验证码功能 验证码后端地址： renren-admin/src/main/java/iorenren/modules/security/controller/LoginController 验证码前端地址： security-enterprise-admin/src/views/pages/login.vue "}}